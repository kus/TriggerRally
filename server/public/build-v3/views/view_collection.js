// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['views/view'], function(View) {
    var ViewCollection;
    ViewCollection = (function(_super) {
      __extends(ViewCollection, _super);

      function ViewCollection() {
        this.onSort = __bind(this.onSort, this);
        this.onReset = __bind(this.onReset, this);
        this.onRemove = __bind(this.onRemove, this);
        this.onAdd = __bind(this.onAdd, this);
        return ViewCollection.__super__.constructor.apply(this, arguments);
      }

      ViewCollection.prototype.childOffset = 0;

      ViewCollection.prototype.initialize = function(options) {
        ViewCollection.__super__.initialize.apply(this, arguments);
        this.views = {};
        this.addAll();
        this.listenTo(this.collection, 'add', this.onAdd);
        this.listenTo(this.collection, 'remove', this.onRemove);
        this.listenTo(this.collection, 'reset', this.onReset);
        this.listenTo(this.collection, 'sort', this.onSort);
      };

      ViewCollection.prototype.destroy = function() {
        this.destroyAll();
        return ViewCollection.__super__.destroy.apply(this, arguments);
      };

      ViewCollection.prototype.onAdd = function(model, collection, options) {
        return this.addModel(model, collection.indexOf(model));
      };

      ViewCollection.prototype.addModel = function(model, index) {
        var $target, view;
        view = this.createView(model);
        view.render();
        $target = this.$el.children().eq(index + this.childOffset);
        if ($target.length > 0) {
          $target.before(view.el);
        } else {
          this.$el.append(view.el);
        }
        return this.views[model.cid] = view;
      };

      ViewCollection.prototype.onRemove = function(model, collection, options) {
        var _ref;
        return (_ref = this.views[model.cid]) != null ? _ref.destroy() : void 0;
      };

      ViewCollection.prototype.onReset = function(collection, options) {
        this.destroyAll();
        return this.addAll();
      };

      ViewCollection.prototype.onSort = function(collection, options) {
        var model, view, _i, _len, _ref, _results;
        this.$el.children().slice(this.childOffset).detach();
        _ref = collection.models;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          view = this.views[model.cid];
          _results.push(this.$el.append(view.$el));
        }
        return _results;
      };

      ViewCollection.prototype.createView = function(model) {
        return new this.view({
          model: model,
          parent: this
        });
      };

      ViewCollection.prototype.addAll = function() {
        this.collection.each(this.addModel, this);
        return this;
      };

      ViewCollection.prototype.destroyAll = function() {
        var cid, view, _ref;
        _ref = this.views;
        for (cid in _ref) {
          view = _ref[cid];
          view.destroy();
        }
        this.views = {};
        return this;
      };

      return ViewCollection;

    })(View);
    return ViewCollection;
  });

}).call(this);
