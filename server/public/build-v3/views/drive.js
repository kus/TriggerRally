// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'backbone-full', 'underscore', 'THREE', 'util/util', 'client/car', 'game/game', 'game/track', 'models/index', 'views/view', 'jade!templates/drive', 'util/recorder'], function($, Backbone, _, THREE, util, clientCar, gameGame, gameTrack, models, View, template, recorder) {
    var Drive, KEYCODE, Vec3, formatRunTime, keys1, keys2, padZero;
    KEYCODE = util.KEYCODE;
    Vec3 = THREE.Vector3;
    padZero = function(val, digits) {
      return (1e15 + val + '').slice(-digits);
    };
    keys1 = {
      brake: 1,
      handbrake: 1,
      throttle: 1,
      turn: 2
    };
    keys2 = {
      nextCpIndex: 0,
      vehicle: {
        body: {
          pos: {
            x: 3,
            y: 3,
            z: 3
          },
          ori: {
            x: 3,
            y: 3,
            z: 3,
            w: 3
          },
          linVel: {
            x: 3,
            y: 3,
            z: 3
          },
          angMom: {
            x: 3,
            y: 3,
            z: 3
          }
        },
        wheels: [
          {
            spinVel: 1
          }
        ],
        engineAngVel: 3
      }
    };
    formatRunTime = function(time) {
      var cents, mins, secs;
      mins = Math.floor(time / 60);
      time -= mins * 60;
      secs = Math.floor(time);
      time -= secs;
      cents = Math.floor(time * 100);
      return mins + ':' + padZero(secs, 2) + '.' + padZero(cents, 2);
    };
    return Drive = (function(_super) {
      __extends(Drive, _super);

      Drive.prototype.template = template;

      function Drive(app, client) {
        this.app = app;
        this.client = client;
        this.record_p = __bind(this.record_p, this);
        this.record_i = __bind(this.record_i, this);
        Drive.__super__.constructor.call(this);
      }

      Drive.prototype.initialize = function() {
        this.replayRun = null;
        return this.replayGame = null;
      };

      Drive.prototype.destroy = function() {
        var _ref, _ref1, _ref2;
        Backbone.trigger('statusbar:hidechallenge');
        if ((_ref = this.socket) != null) {
          _ref.disconnect();
        }
        if ((_ref1 = this.game) != null) {
          _ref1.destroy();
        }
        if ((_ref2 = this.replayGame) != null) {
          _ref2.destroy();
        }
        return Drive.__super__.destroy.apply(this, arguments);
      };

      Drive.prototype.viewModel = function() {
        return {
          xpEndRace: this.xpEndRace
        };
      };

      Drive.prototype.onKeyDown = function(event) {
        var _ref;
        if (event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {
          return;
        }
        switch (event.keyCode) {
          case KEYCODE['C']:
            return (_ref = this.client.camControl) != null ? _ref.nextMode() : void 0;
          case KEYCODE['R']:
            if (this.game) {
              return this.restartGame();
            }
        }
      };

      Drive.prototype.afterRender = function() {
        var client, createGame, root, updateChallenge;
        root = this.app.root;
        Backbone.trigger('statusbar:showchallenge');
        client = this.client;
        client.camera.idealFov = 75;
        client.updateCamera();
        this.$countdown = this.$('.countdown');
        this.$runTimer = this.$('.timer');
        this.$checkpoints = this.$('.checkpoints');
        this.$splitTime = this.$('.split-time');
        this.$restartButton = this.$('.restartbutton');
        this.$nextButton = this.$('.nextbutton');
        this.$restartButton.on('click', (function(_this) {
          return function() {
            if (_this.game) {
              return _this.restartGame();
            }
          };
        })(this));
        (updateChallenge = (function(_this) {
          return function() {
            var _ref;
            _this.$runTimer.toggleClass('hidden', root.prefs.challenge === 'none');
            return _this.$splitTime.toggleClass('hidden', (_ref = root.prefs.challenge) === 'none' || _ref === 'clock');
          };
        })(this))();
        this.listenTo(root, 'change:prefs.challenge', updateChallenge);
        this.listenTo(root, 'change:prefs.challenge', (function(_this) {
          return function() {
            return _this.useChallengeRun();
          };
        })(this));
        this.game = null;
//        this.socket = io.connect('/drive');
//        this.socket.on('updateuser', function(data) {
//          if (data.id !== root.user.id) {
//            return;
//          }
//          return root.user.credits = data.credits;
//        });
        this.lastRaceTime = 0;
        this.updateTimer = true;
        (createGame = (function(_this) {
          return function() {
            var carId, carModel, nextTrackId, products, _ref, _ref1, _ref2;
            if (root.track == null) {
              return;
            }
            products = ((_ref = root.user) != null ? _ref.products : void 0) || [];
            _this.trackId = root.track.id;
            nextTrackId = (_ref1 = root.track.next_track) != null ? _ref1.id : void 0;
            _this.$nextButton.toggleClass('hidden', !nextTrackId);
            _this.$nextButton.attr('href', "/track/" + nextTrackId + "/drive");
            if (_this.replayRun && _this.replayRun.track.id !== root.track.id) {
              _this.setRun(null);
            }
            _this.carId = carId = (_ref2 = root.getCarId()) != null ? _ref2 : 'ArbusuG';
            carModel = models.Car.findOrCreate(carId);
            return carModel.fetch({
              success: function() {
                var _ref3;
                if (_this.destroyed) {
                  return;
                }
                if ((_ref3 = _this.game) != null) {
                  _ref3.destroy();
                }
                _this.game = new gameGame.Game(_this.client.track);
                _this.client.addGame(_this.game);
                _this.createReplayGame();
                return _this.game.addCarConfig(carModel.config, function(progress) {
                  var obj1, obj2;
                  _this.progress = progress;
                  progress.on('advance', function() {
                    return _this.advance();
                  });
                  obj1 = progress.vehicle.controller.input;
                  obj2 = progress;
                  _this.rec1 = new recorder.StateSampler(obj1, keys1, 20, _this.record_i);
                  _this.rec2 = new recorder.StateSampler(obj2, keys2, 40, _this.record_p);
                  _this.game.sim.pubsub.on('step', function() {
                    _this.rec1.observe();
                    return _this.rec2.observe();
                  });
                  return _this.restartGame();
                });
              }
            });
          };
        })(this))();
        this.listenTo(root, 'change:track', createGame);
        this.listenTo(root, 'change:user', createGame);
        this.listenTo(root, 'change:user.products', createGame);
        return this.listenTo(root, 'change:prefs.car', createGame);
      };

      Drive.prototype.updateSplit = function() {
        var diff, idx, minus, text, _ref;
        idx = ((_ref = this.progress) != null ? _ref.cpTimes.length : void 0) - 1;
        if (this.replayRun && idx >= 0) {
          diff = this.progress.cpTimes[idx] - this.replayRun.times[idx] - this.game.startTime;
          minus = diff < 0;
          text = minus ? '-' + formatRunTime(-diff) : '+' + formatRunTime(diff);
          this.$splitTime.text(text);
          this.$splitTime.removeClass('hidden');
          this.$splitTime.toggleClass('minus', minus);
          if (minus && !this.app.root.user) {
            return Backbone.trigger('app:status', 'You\'re leading! Log in to save your score!');
          }
        } else {
          return this.$splitTime.addClass('hidden');
        }
      };

      Drive.prototype.restartGame = function() {
        this.updateTimer = true;
        this.$runTimer.addClass('running');
        this.$('.racecomplete').addClass('hidden');
        this.splitTimes = [];
        this.game.restart();
        this.rec1.object = this.progress.vehicle.controller.input;
        this.rec1.restart();
        this.rec2.restart();
//        return this.socket.emit('start', {
//          car: this.carId,
//          track: this.app.root.track.id,
//          keyMap_i: this.rec1.toJSON().keyMap,
//          keyMap_p: this.rec2.toJSON().keyMap
//        });
      };

      Drive.prototype.record_i = function(offset, state) {
//        return this.socket.emit('record_i', {
//          samples: [[offset, state]]
//        });
      };

      Drive.prototype.record_p = function(offset, state) {
//        return this.socket.emit('record_p', {
//          samples: [[offset, state]]
//        });
      };

      Drive.prototype.advance = function() {
        var $sharefacebook, $sharetwitter, cp, cpNext, cpTotal, data, fade, finishTime, message, shareText, speak, startTime, targetUrl, text, time, times;
        cpNext = this.progress.nextCpIndex;
        cpTotal = this.app.root.track.config.course.checkpoints.length;
        text = "" + cpNext + " / " + cpTotal;
        this.$checkpoints.text(text);
        this.updateSplit();
        if (cpNext > 0) {
          cp = cpNext - 1;
          data = {
            cp: cp,
            time: this.progress.cpTimes[cp]
          };
//          this.socket.emit('advance', data);
        }
        if (cpNext > 1 || this.game.interpolatedRaceTime() > 1) {
          fade = true;
          if (cpNext === cpTotal) {
            if (!this.xpEndRace) {
              message = 'Race complete';
              fade = false;
            }
            speak = 'complete';
            this.$('.racecomplete').removeClass('hidden');
          } else if (cpNext === cpTotal - 1) {
            message = 'Nearly there!';
          } else {

          }
          if (speak) {
            this.client.speak(speak);
          }
          if (message) {
            this.$countdown.text(message);
            this.$countdown.removeClass('fadeout');
            if (fade) {
              _.defer((function(_this) {
                return function() {
                  return _this.$countdown.addClass('fadeout');
                };
              })(this));
            }
          }
        }
        window._gaq.push(['_trackEvent', 'Tracks', 'Drive Advance', "" + this.app.root.track.id + ": " + text]);
        ga('send', 'event', 'Drive', 'Checkpoint', "" + this.app.root.track.id + ": " + text, cpNext);
        if (!this.progress.isFinished()) {
          return;
        }
        if (!(this.progress.nextCpIndex > 0)) {
          throw new Error('Simulation error');
        }
        this.updateTimer = false;
        this.$runTimer.removeClass('running');
        finishTime = this.$runTimer.text();
        this.$('.finishtime').text(finishTime);
        targetUrl = encodeURIComponent("https://triggerrally.com/track/" + this.app.root.track.id);
        shareText = encodeURIComponent("I finished \"" + this.app.root.track.name + "\" in " + finishTime + ". Can you beat that?");
        $sharefacebook = this.$('.sharebutton.facebook');
        $sharefacebook.attr('href', "https://www.facebook.com/sharer/sharer.php?u=" + targetUrl);
        $sharefacebook.on('click', function() {
          window.open(this.href, 'facebook-share-dialog', 'width=626,height=436');
          ga('send', 'social', 'Facebook', 'SharePrompt', targetUrl);
          ga('send', 'event', 'Social', 'SharePrompt', 'Facebook');
          return false;
        });
        $sharetwitter = this.$('.sharebutton.twitter');
        $sharetwitter.attr('href', "https://twitter.com/share?url=" + targetUrl + "&via=TriggerRally&text=" + shareText + "&related=jareiko");
        $sharetwitter.on('click', function() {
          window.open(this.href, 'twitter-share-dialog', 'width=626,height=436');
          ga('send', 'social', 'Twitter', 'TweetPrompt', targetUrl);
          ga('send', 'event', 'Social', 'SharePrompt', 'Twitter');
          return false;
        });
        startTime = this.game.startTime;
        times = (function() {
          var _i, _len, _ref, _results;
          _ref = this.progress.cpTimes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            time = _ref[_i];
            _results.push(time - startTime);
          }
          return _results;
        }).call(this);
//        return this.socket.emit('times', {
//          times: times
//        });
      };

      Drive.prototype.setTrackId = function(trackId) {
        var track;
        this.trackId = trackId;
        track = models.Track.findOrCreate(trackId);
        return track.fetch({
          success: (function(_this) {
            return function() {
              return track.env.fetch({
                success: function() {
                  if (_this.destroyed) {
                    return;
                  }
                  Backbone.trigger('app:settrack', track);
                  return Backbone.trigger('app:settitle', track.name);
                }
              });
            };
          })(this),
          error: function() {
            return Backbone.trigger('app:notfound');
          }
        });
      };

      Drive.prototype.setRunId = function(runId) {
        return this.setRun(models.Run.findOrCreate(runId));
      };

      Drive.prototype.useChallengeRun = function() {
        var challenge, trackRuns;
        this.setRun(null);
        challenge = this.app.root.prefs.challenge;
        switch (challenge) {
          case 'world':
            trackRuns = models.TrackRuns.findOrCreate(this.trackId);
            return trackRuns.fetch({
              success: (function(_this) {
                return function() {
                  return _this.setRun(trackRuns.runs.at(0));
                };
              })(this)
            });
        }
      };

      Drive.prototype.cleanUrl = function() {
        return Backbone.history.navigate("/track/" + this.trackId + "/drive");
      };

      Drive.prototype.setRun = function(run) {
        var _ref;
        this.replayRun = null;
        if ((_ref = this.replayGame) != null) {
          _ref.destroy();
        }
        this.replayGame = null;
        if (!run) {
          return this.cleanUrl();
        }
        if (run.record_p) {
          return this.setRunInternal(run);
        } else {
          return run.fetch({
            force: true,
            success: (function(_this) {
              return function() {
                return _this.setRunInternal(run);
              };
            })(this),
            error: (function(_this) {
              return function() {
                return _this.cleanUrl();
              };
            })(this)
          });
        }
      };

      Drive.prototype.setRunInternal = function(run) {
        this.replayRun = run;
        return this.createReplayGame();
      };

      Drive.prototype.createReplayGame = function() {
        var car;
        if (this.replayGame) {
          return;
        }
        if (!(this.replayRun && this.game)) {
          return;
        }
        car = models.Car.findOrCreate(this.replayRun.car.id);
        return car.fetch({
          success: (function(_this) {
            return function() {
              if (_this.destroyed) {
                return;
              }
              _this.replayGame = new gameGame.Game(_this.client.track);
              _this.replayGame.addCarConfig(car.config, function(progress) {
                return _this.syncReplayGame(progress);
              });
              return _this.client.addGame(_this.replayGame, {
                isGhost: true
              });
            };
          })(this)
        });
      };

      Drive.prototype.update = function(delta) {
        var lastNum, num, raceTime, text;
        if (!this.game) {
          return;
        }
        if (this.updateTimer) {
          raceTime = this.game.interpolatedRaceTime();
          if (raceTime >= 0) {
            if (this.lastRaceTime < 0) {
              this.client.speak('go');
              this.$countdown.text('Go!');
              this.$countdown.addClass('fadeout');
            }
            this.$runTimer.text(formatRunTime(raceTime));
          } else {
            num = Math.ceil(-raceTime);
            lastNum = Math.ceil(-this.lastRaceTime);
            if (num !== lastNum) {
              this.$runTimer.text("");
              text = '' + num;
              this.client.speak(text);
              this.$countdown.text(text);
              this.$countdown.removeClass('fadeout');
            }
          }
          this.lastRaceTime = raceTime;
        }
      };

      Drive.prototype.syncReplayGame = function(progress) {
        var obj1, obj2, originalUpdate, play1, play2, replayGame, run;
        run = this.replayRun;
        replayGame = this.replayGame;
        obj1 = progress.vehicle.controller.input;
        obj2 = progress;
        play1 = new recorder.StatePlaybackInterpolated(obj1, run.record_i);
        play2 = new recorder.StatePlaybackInterpolated(obj2, run.record_p);
        replayGame.sim.pubsub.on('step', function() {
          play1.step();
          return play2.step();
        });
        originalUpdate = replayGame.update;
        replayGame.update = (function(_this) {
          return function(deltaIgnored) {
            var delta, masterTime;
            masterTime = _this.game.sim.interpolatedTime();
            delta = masterTime - replayGame.sim.interpolatedTime();
            if (delta > 0) {
              originalUpdate.call(replayGame, delta);
            } else if (delta < 0) {
              replayGame.restart();
              play1.object = progress.vehicle.controller.input;
              play1.restart();
              play2.restart();
              originalUpdate.call(replayGame, masterTime);
            }
          };
        })(this);
      };

      return Drive;

    })(View);
  });

}).call(this);
