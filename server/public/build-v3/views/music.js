// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['views/view', 'jade!templates/music'], function(View, template) {
    var MusicView, artist, baseUrl, src, title, tracks, tracksSrc, val;
    baseUrl = '/radio/';
    tracksSrc = {
      'Alex Beroza': {
        'Art Now': 'AlexBeroza_-_Art_Now.ogg',
        'Brake Dance': 'AlexBeroza_-_Brake_Dance.ogg',
        'Could Be': 'AlexBeroza_-_Could_Be.ogg',
        'Emerge In Love': 'AlexBeroza_-_Emerge_In_Love.ogg',
        'In Peace': 'AlexBeroza_-_In_Peace.ogg'
      },
      'Carl and the Saganauts': {
        'Trigger Rally Theme': 'saganauts-tr4.ogg'
      },
      'Citizen X0': {
        'Art is Born': 'Citizen_X0_-_Art_is_Born.ogg'
      },
      'DoKashiteru': {
        '2025': 'DoKashiteru_-_2025.ogg'
      },
      'Dubslate': {
        'Nervous Refix': 'dubslate_-_nervous_refix.ogg'
      },
      'J.Lang': {
        'Love Will Open Your Heart Dance Mix': 'djlang59_-_Love_Will_Open_Your_Heart_Dance_Mix.ogg'
      },
      'Sawtooth': {
        'Carcinogens': 'Sawtooth_-_Carcinogens.ogg'
      },
      'SpinningMerkaba': {
        '260809 Funky Nurykabe': 'jlbrock44_-_260809_Funky_Nurykabe.ogg'
      },
      'Super Sigil': {
        'Thunderlizard at the Art War': 'Super_Sigil_-_Thunderlizard_at_the_Art_War.ogg'
      },
      'Travis Morgan': {
        'pROgraM vs. Us3R': 'morgantj_-_pROgraM_vs._Us3R.ogg'
      }
    };
    tracks = [];
    for (artist in tracksSrc) {
      val = tracksSrc[artist];
      for (title in val) {
        src = val[title];
        tracks.push({
          artist: artist,
          title: title,
          src: src
        });
      }
    }
    return MusicView = (function(_super) {
      __extends(MusicView, _super);

      MusicView.prototype.tagName = 'span';

      MusicView.prototype.className = 'dropdownmenu';

      MusicView.prototype.template = template;

      function MusicView(app) {
        this.app = app;
        MusicView.__super__.constructor.call(this);
      }

      MusicView.prototype.afterRender = function() {
        var $artist, $audio, $next, $playpause, $status, $title, $volume, idx, playNext, prefs, recent, track, updatePlay, updateStatus, updateVolume;
        prefs = this.app.root.prefs;
        $audio = this.$('audio');
        $title = this.$('.title');
        $artist = this.$('.artist');
        $status = this.$('.status');
        $volume = this.$('input.volume');
        $playpause = this.$('.musiccontrol.playpause');
        $next = this.$('.musiccontrol.next');
        $audio.on('all');
        track = null;
        updateStatus = function() {
          if (prefs.musicplay) {
            return $status.text("(" + track.title + " by " + track.artist + ")");
          } else {
            return $status.text("(paused)");
          }
        };
        idx = -1;
        recent = [];
        playNext = function() {
          var pickRandom;
          prefs.musicplay = true;
          pickRandom = function() {
            return Math.floor(Math.random() * tracks.length);
          };
          while (true) {
            idx = pickRandom();
            if (__indexOf.call(recent, idx) < 0) {
              break;
            }
          }
          recent = recent.slice(-5);
          recent.push(idx);
          track = tracks[idx];
          $audio.attr('src', baseUrl + track.src);
          $artist.text(track.artist);
          $title.text(track.title);
          return updateStatus();
        };
        $audio[0].volume = 0.5;
        $audio.on('ended', playNext);
        $next.on('click', playNext);
        (updatePlay = function() {
          $playpause.toggleClass('play', !prefs.musicplay);
          $playpause.toggleClass('pause', prefs.musicplay);
          if (prefs.musicplay) {
            if (track) {
              updateStatus();
              return $audio[0].play();
            } else {
              return playNext();
            }
          } else {
            updateStatus();
            return $audio[0].pause();
          }
        })();
        $playpause.on('click', function() {
          return prefs.musicplay = !prefs.musicplay;
        });
        prefs.on('change:musicplay', updatePlay);
        (updateVolume = function() {
          $volume.val(prefs.musicvolume);
          return $audio[0].volume = prefs.musicvolume;
        })();
        $volume.on('change', function() {
          return prefs.musicvolume = $volume.val();
        });
        return prefs.on('change:musicvolume', updateVolume);
      };

      return MusicView;

    })(View);
  });

}).call(this);
