// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'backbone-full', 'views/view', 'jade!templates/purchase', 'util/popup'], function($, Backbone, View, template, popup) {
    var PurchaseView;
    return PurchaseView = (function(_super) {
      var pricing;

      __extends(PurchaseView, _super);

      PurchaseView.prototype.className = 'overlay';

      PurchaseView.prototype.template = template;

      function PurchaseView(user, app, client) {
        this.app = app;
        this.client = client;
        PurchaseView.__super__.constructor.call(this, {
          model: user
        });
      }

      pricing = {
        80: '0.99',
        200: '1.99',
        550: '4.99',
        1200: '9.99',
        2000: '15.99'
      };

      PurchaseView.prototype.viewModel = function() {
        var credits, price;
        return {
          credits: this.model.credits,
          options: (function() {
            var _results;
            _results = [];
            for (credits in pricing) {
              price = pricing[credits];
              _results.push({
                credits: credits,
                price: price
              });
            }
            return _results;
          })()
        };
      };

      PurchaseView.prototype.afterRender = function() {
        var checkoutUrl, creditsVal, root;
        root = this.app.root;
        this.$('.modal-blocker').on('click', (function(_this) {
          return function(event) {
            return _this.destroy();
          };
        })(this));
        this.$('.purchasecredits input:radio[value=\"550\"]').prop('checked', true);
        creditsVal = (function(_this) {
          return function() {
            return parseInt(_this.$('input[name=credits]:checked').val());
          };
        })(this);
        checkoutUrl = (function(_this) {
          return function() {
            return "/checkout?method=paypal&cur=USD&pack=credits" + (creditsVal()) + "&popup=1";
          };
        })(this);
        this.$('.checkout').on('click', (function(_this) {
          return function() {
            var result;
            ga('send', 'event', 'purchase', 'click', 'checkout', creditsVal());
            result = popup.create(checkoutUrl(), "Checkout", function(autoclosed) {
              if (autoclosed) {
                _this.destroy();
              }
              return root.user.fetch({
                force: true
              });
            });
            if (!result) {
              alert('Popup window was blocked!');
            }
            return false;
          };
        })(this));
        ga('send', 'pageview', {
          page: '/purchase-credits',
          title: 'Purchase Credits Dialog'
        });
      };

      return PurchaseView;

    })(View);
  });

}).call(this);
