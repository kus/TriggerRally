// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['jquery', 'backbone-full', 'views/view', 'jade!templates/profile', 'util/popup'], function($, Backbone, View, template, popup) {
    var ProfileView;
    return ProfileView = (function(_super) {
      var issueDate, loadingText, pictureSrc;

      __extends(ProfileView, _super);

      ProfileView.prototype.template = template;

      function ProfileView(model, app, client) {
        this.app = app;
        this.client = client;
        ProfileView.__super__.constructor.call(this, {
          model: model
        });
      }

      ProfileView.prototype.initialize = function() {
        Backbone.trigger('app:settitle', this.model.name);
        this.listenTo(this.model, 'change:name', (function(_this) {
          return function() {
            return Backbone.trigger('app:settitle', _this.model.name);
          };
        })(this));
        this.listenTo(this.model, 'change:id', (function(_this) {
          return function() {
            return _this.render();
          };
        })(this));
        this.listenTo(this.model, 'change:products', (function(_this) {
          return function() {
            return _this.render();
          };
        })(this));
        this.listenTo(this.app.root, 'change:user', (function(_this) {
          return function() {
            return _this.render();
          };
        })(this));
        return this.model.fetch({
          error: function() {
            return Backbone.trigger('app:notfound');
          }
        });
      };

      ProfileView.prototype.editable = function() {
        var _ref;
        return this.model.id === ((_ref = this.app.root.user) != null ? _ref.id : void 0);
      };

      ProfileView.prototype.purchased = function() {
        var products, _ref;
        products = (_ref = this.model.products) != null ? _ref : [];
        return __indexOf.call(products, 'paid') >= 0 || __indexOf.call(products, 'packa') >= 0 || __indexOf.call(products, 'ignition') >= 0 || __indexOf.call(products, 'mayhem') >= 0;
      };

      loadingText = '...';

      pictureSrc = function(picture) {
        if (picture == null) {
          picture = 'blank';
        }
        return "/images/profile/" + picture + ".jpg";
      };

      issueDate = function(created) {
        var isoDate;
        isoDate = function(d) {
          var z;
          d = new Date(d);
          z = function(n) {
            return (n < 10 ? "0" : "") + n;
          };
          return "" + (d.getFullYear()) + "-" + (z(d.getMonth() + 1)) + "-" + (z(d.getDate()));
        };
        if (created != null) {
          return isoDate(created);
        } else {
          return loadingText;
        }
      };

      ProfileView.prototype.viewModel = function() {
        var data, products, _ref;
        data = ProfileView.__super__.viewModel.apply(this, arguments);
        data.loaded = data.name != null;
        data.issueDate = issueDate(data.created);
        if (data.name == null) {
          data.name = loadingText;
        }
        data.noPicture = data.picture == null;
        data.editable = this.editable();
        data.purchased = this.purchased();
        data.title = data.purchased ? 'Rally License' : 'Provisional License';
        data.badges = [];
        products = (_ref = data.products) != null ? _ref : [];
        if (__indexOf.call(products, 'ignition') >= 0) {
          data.badges.push({
            href: '/purchase',
            img_src: '/images/packs/ignition.svg',
            img_title: 'Ignition Icarus'
          });
        }
        if (__indexOf.call(products, 'mayhem') >= 0) {
          data.badges.push({
            href: '/purchase',
            img_src: '/images/packs/mayhem.png',
            img_title: 'Mayhem Monster Truck'
          });
        }
        return data;
      };

      ProfileView.prototype.afterRender = function() {
        var $created, $name, $nameError, $pic;
        $created = this.$('.issuedate');
        $name = this.$('.user-name');
        $pic = this.$('.picture');
        $nameError = this.$('div.user-name-error');
        $pic.css('background-image', "url(" + (pictureSrc(this.model.picture)) + ")");
        this.listenTo(this.model, 'change:name', (function(_this) {
          return function(model, value) {
            return $name.text(value);
          };
        })(this));
        this.listenTo(this.model, 'change:picture', (function(_this) {
          return function(model, value) {
            return $pic.css('background-image', "url(" + (pictureSrc(_this.model.picture)) + ")");
          };
        })(this));
        this.listenTo(this.model, 'change:created', (function(_this) {
          return function(model, value) {
            return $created.text(issueDate(value));
          };
        })(this));
        if (!this.editable()) {
          return;
        }
        $name.click((function(_this) {
          return function(event) {
            var $input, name;
            name = $name.text();
            $input = $("<input class=\"user-name\" type=\"text\", value=\"" + name + "\", maxlength=20></input>");
            _this.model.on('invalid', function(model, error, options) {
              $input.addClass('invalid');
              return $nameError.text(error);
            });
            $input.on('input', function() {
              var invalid;
              _this.model.set({
                name: $input.val()
              });
              invalid = _this.model.validate();
              if (invalid) {
                $input.addClass('invalid');
                return $nameError.text(invalid);
              } else {
                $input.removeClass('invalid');
                return $nameError.text('');
              }
            });
            $input.keydown(function(event) {
              switch (event.keyCode) {
                case 13:
                  if (!_this.model.isValid()) {
                    return;
                  }
                  return _this.model.save(null, {
                    success: function() {
                      return $input.remove();
                    },
                    error: function() {
                      return $nameError.text('Failed to save');
                    }
                  });
                case 27:
                  return $input.remove();
              }
            });
            $input.blur(function() {
              return $input.remove();
            });
            $name.parent().append($input);
            return $input.focus();
          };
        })(this));
        if (this.purchased()) {
          return $pic.click((function(_this) {
            return function(event) {
              var picture, _ref;
              picture = parseInt((_ref = _this.model.picture) != null ? _ref : -1, 10);
              return _this.model.save({
                picture: (picture + 1) % 6
              });
            };
          })(this));
        }
      };

      return ProfileView;

    })(View);
  });

}).call(this);
