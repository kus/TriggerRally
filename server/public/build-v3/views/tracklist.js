// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone-full', 'views/view', 'views/view_collection', 'jade!templates/tracklistentry'], function(Backbone, View, ViewCollection, templateTrackListEntry) {
    var TrackListEntryView, TrackListView;
    TrackListEntryView = (function(_super) {
      __extends(TrackListEntryView, _super);

      function TrackListEntryView() {
        return TrackListEntryView.__super__.constructor.apply(this, arguments);
      }

      TrackListEntryView.prototype.tagName = 'div';

      TrackListEntryView.prototype.className = 'track';

      TrackListEntryView.prototype.template = templateTrackListEntry;

      TrackListEntryView.prototype.initialize = function(options) {
        TrackListEntryView.__super__.initialize.apply(this, arguments);
        this.root = options.parent.options.root;
        this.model.on('change:name', (function(_this) {
          return function() {
            return _this.render();
          };
        })(this));
        this.root.on('change:track.id', (function(_this) {
          return function() {
            return _this.updateSelected();
          };
        })(this));
        return this.model.fetch();
      };

      TrackListEntryView.prototype.viewModel = function() {
        return {
          name: this.model.name || 'Loading...',
          url: "/track/" + this.model.id + "/edit"
        };
      };

      TrackListEntryView.prototype.updateSelected = function() {
        var _ref;
        return this.$el.toggleClass('selected', this.model.id === ((_ref = this.root.track) != null ? _ref.id : void 0));
      };

      TrackListEntryView.prototype.afterRender = function() {
        var $a;
        this.updateSelected();
        $a = this.$el.find('a');
        return $a.click(function() {
          Backbone.history.navigate($a.attr('href'), {
            trigger: true
          });
          return false;
        });
      };

      return TrackListEntryView;

    })(View);
    return TrackListView = (function(_super) {
      __extends(TrackListView, _super);

      function TrackListView() {
        return TrackListView.__super__.constructor.apply(this, arguments);
      }

      TrackListView.prototype.view = TrackListEntryView;

      TrackListView.prototype.initialize = function() {
        TrackListView.__super__.initialize.apply(this, arguments);
        this.collection.sort();
        return this.listenTo(this.collection, 'change:name', (function(_this) {
          return function() {
            return _this.collection.sort();
          };
        })(this));
      };

      return TrackListView;

    })(ViewCollection);
  });

}).call(this);
