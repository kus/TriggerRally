// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone-full', 'views/view', 'views/view_collection', 'jade!templates/trackset', 'jade!templates/tracksetentry', 'views/favorite', 'views/user'], function(Backbone, View, ViewCollection, template, templateEntry, FavoriteView, UserView) {
    var TrackListView, TrackSetEntryView, TrackSetView;
    TrackSetEntryView = (function(_super) {
      __extends(TrackSetEntryView, _super);

      function TrackSetEntryView() {
        return TrackSetEntryView.__super__.constructor.apply(this, arguments);
      }

      TrackSetEntryView.prototype.template = templateEntry;

      TrackSetEntryView.prototype.tagName = 'tr';

      TrackSetEntryView.prototype.initialize = function() {
        this.model.fetch();
        this.root = this.options.parent.options.root;
        return this.listenTo(this.model, 'change', this.render, this);
      };

      TrackSetEntryView.prototype.viewModel = function() {
        var data, loading;
        data = TrackSetEntryView.__super__.viewModel.apply(this, arguments);
        loading = '...';
        if (data.name == null) {
          data.name = loading;
        }
        if (data.modified_ago == null) {
          data.modified_ago = loading;
        }
        if (data.count_copy == null) {
          data.count_copy = loading;
        }
        if (data.count_drive == null) {
          data.count_drive = loading;
        }
        if (data.count_fav == null) {
          data.count_fav = loading;
        }
        if (data.user == null) {
          data.user = null;
        }
        return data;
      };

      TrackSetEntryView.prototype.beforeRender = function() {
        var _ref, _ref1;
        if ((_ref = this.userView) != null) {
          _ref.destroy();
        }
        return (_ref1 = this.favoriteView) != null ? _ref1.destroy() : void 0;
      };

      TrackSetEntryView.prototype.afterRender = function() {
        var $favorite, $trackuser, track, updateUserView;
        track = this.model;
        $trackuser = this.$('.trackuser');
        this.userView = null;
        (updateUserView = (function(_this) {
          return function() {
            var _ref;
            if ((_ref = _this.userView) != null) {
              _ref.destroy();
            }
            _this.userView = track.user && new UserView({
              model: track.user
            });
            $trackuser.empty();
            if (_this.userView) {
              return $trackuser.append(_this.userView.el);
            }
          };
        })(this))();
        this.listenTo(track, 'change:user', updateUserView);
        $favorite = this.$('.favorite');
        this.favoriteView = new FavoriteView(track, this.options.parent.options.root);
        return $favorite.html(this.favoriteView.el);
      };

      TrackSetEntryView.prototype.destroy = function() {
        this.beforeRender();
        return TrackSetEntryView.__super__.destroy.apply(this, arguments);
      };

      return TrackSetEntryView;

    })(View);
    TrackListView = (function(_super) {
      __extends(TrackListView, _super);

      function TrackListView() {
        return TrackListView.__super__.constructor.apply(this, arguments);
      }

      TrackListView.prototype.view = TrackSetEntryView;

      TrackListView.prototype.childOffset = 1;

      return TrackListView;

    })(ViewCollection);
    return TrackSetView = (function(_super) {
      __extends(TrackSetView, _super);

      TrackSetView.prototype.className = 'overlay';

      TrackSetView.prototype.template = template;

      function TrackSetView(model, app) {
        this.app = app;
        TrackSetView.__super__.constructor.call(this, {
          model: model
        });
      }

      TrackSetView.prototype.afterRender = function() {
        var trackListView;
        trackListView = new TrackListView({
          collection: this.model.tracks,
          el: this.$('table.tracklist'),
          root: this.app.root
        });
        trackListView.render();
        return this.listenTo(this.model, 'change:name', (function(_this) {
          return function(m, name) {
            _this.$('.tracksetname').text(name);
            return Backbone.trigger('app:settitle', name);
          };
        })(this));
      };

      return TrackSetView;

    })(View);
  });

}).call(this);
