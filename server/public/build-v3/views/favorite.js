// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['views/view', 'jade!templates/favorite'], function(View, template) {
    var FavoriteView;
    return FavoriteView = (function(_super) {
      __extends(FavoriteView, _super);

      FavoriteView.prototype.tagName = 'span';

      FavoriteView.prototype.template = template;

      function FavoriteView(model, root) {
        this.root = root;
        FavoriteView.__super__.constructor.call(this, {
          model: model
        });
      }

      FavoriteView.prototype.initialize = function() {
        FavoriteView.__super__.initialize.apply(this, arguments);
        this.render();
        this.listenTo(this.root, 'change:user', (function(_this) {
          return function() {
            return _this.updateChecked();
          };
        })(this));
        this.listenTo(this.root, 'change:user.favorite_tracks', (function(_this) {
          return function() {
            return _this.updateChecked();
          };
        })(this));
        return this.listenTo(this.model, 'change:id', (function(_this) {
          return function() {
            return _this.updateChecked();
          };
        })(this));
      };

      FavoriteView.prototype.viewModel = function() {
        var _ref;
        return {
          checked: (_ref = this.root.user) != null ? _ref.isFavoriteTrack(this.model) : void 0
        };
      };

      FavoriteView.prototype.updateChecked = function() {
        var $favorite, _ref;
        $favorite = this.$('.favorite input');
        return $favorite[0].checked = (_ref = this.root.user) != null ? _ref.isFavoriteTrack(this.model) : void 0;
      };

      FavoriteView.prototype.afterRender = function() {
        var $favorite;
        $favorite = this.$('.favorite input');
        return $favorite.click((function(_this) {
          return function(event) {
            if (_this.root.user) {
              _this.root.user.setFavoriteTrack(_this.model, $favorite[0].checked);
              _this.root.user.save();
            } else {
              Backbone.trigger('app:dologin');
              event.preventDefault();
              false;
            }
          };
        })(this));
      };

      return FavoriteView;

    })(View);
  });

}).call(this);
