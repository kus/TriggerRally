// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['backbone-full', 'jade!templates/statusbar', 'jade!templates/statusbarcar', 'views/favorite', 'views/music', 'views/user', 'views/view', 'models/index'], function(Backbone, template, templateCar, FavoriteView, MusicView, UserView, View, models) {
    var StatusBarView;
    return StatusBarView = (function(_super) {
      __extends(StatusBarView, _super);

      StatusBarView.prototype.el = '#statusbar';

      StatusBarView.prototype.template = template;

      function StatusBarView(app) {
        this.app = app;
        StatusBarView.__super__.constructor.call(this);
      }

      StatusBarView.prototype.viewModel = function() {
        var pd, pixdens, prefs, user, _i, _len;
        prefs = this.app.root.prefs;
        user = this.app.root.user;
        pixdens = [
          {
            value: 2,
            label: '2:1'
          }, {
            value: 1,
            label: '1:1'
          }, {
            value: 0.5,
            label: '1:2'
          }, {
            value: 0.25,
            label: '1:4'
          }, {
            value: 0.125,
            label: '1:8'
          }
        ];
        for (_i = 0, _len = pixdens.length; _i < _len; _i++) {
          pd = pixdens[_i];
          pd.checked = '' + pd.value === prefs.pixeldensity;
        }
        return {
          prefs: prefs,
          pixdens: pixdens,
          user: user
        };
      };

      StatusBarView.prototype.afterRender = function() {
        var $carSection, $favorite, $myFavorites, $myTracks, $prefAntialias, $prefAudio, $prefShadows, $prefTerrainhq, $prefVolume, $trackAuthor, $trackInfo, $trackLinkDrive, $trackLinkEdit, $trackLinkInfo, $trackName, addCars, musicView, prefs, root, trackUserView, updateChallenge, updateMyFavorites, updateMyTracks, updateUserView, userView;
        root = this.app.root;
        musicView = new MusicView(this.app);
        this.$('td.navigation').append(musicView.render().el);
        userView = null;
        (updateUserView = (function(_this) {
          return function() {
            if (userView != null) {
              userView.destroy();
            }
            userView = new UserView({
              model: root.user,
              showStatus: true
            });
            return _this.$('.userinfo').append(userView.el);
          };
        })(this))();
        this.listenTo(root, 'change:user', updateUserView);
        $prefAudio = this.$('#pref-audio');
        $prefVolume = this.$('#pref-volume');
        $prefShadows = this.$('#pref-shadows');
        $prefTerrainhq = this.$('#pref-terrainhq');
        $prefAntialias = this.$('#pref-antialias');
        prefs = root.prefs;
        $prefAudio.on('change', function() {
          return prefs.audio = $prefAudio[0].checked;
        });
        $prefVolume.on('change', function() {
          return prefs.volume = $prefVolume.val();
        });
        $prefShadows.on('change', function() {
          return prefs.shadows = $prefShadows[0].checked;
        });
        $prefTerrainhq.on('change', function() {
          return prefs.terrainhq = $prefTerrainhq[0].checked;
        });
        $prefAntialias.on('change', function() {
          return prefs.antialias = $prefAntialias[0].checked;
        });
        this.listenTo(root, 'change:prefs.', function() {
          $prefAudio[0].checked = prefs.audio;
          $prefVolume.val(prefs.volume);
          $prefShadows[0].checked = prefs.shadows;
          $prefTerrainhq[0].checked = prefs.terrainhq;
          return $prefAntialias[0].checked = prefs.antialias;
        });
        this.$el.on('change', '.statusbarcar input:radio', function(event) {
          var available, purchaseUrl, _ref, _ref1, _ref2;
          prefs.car = this.value;
          available = (_ref = (_ref1 = root.user) != null ? _ref1.cars() : void 0) != null ? _ref : ['ArbusuG'];
          if (_ref2 = prefs.car, __indexOf.call(available, _ref2) < 0) {
            purchaseUrl = {
              'Icarus': '/ignition',
              'Mayhem': '/mayhem'
            };
            Backbone.history.navigate(purchaseUrl[prefs.car], {
              trigger: true
            });
          }
        });
        this.$el.on('change', '.pixeldensity input:radio', function(event) {
          return prefs.pixeldensity = this.value;
        });
        (updateChallenge = (function(_this) {
          return function() {
            return _this.$("input[type=radio][name=challenge][value=" + prefs.challenge + "]").prop('checked', true);
          };
        })(this))();
        this.listenTo(root, 'change:prefs.challenge', updateChallenge);
        this.$("input[type=radio][name=challenge]").on('change', function() {
          return prefs.challenge = $(this).val();
        });
        $carSection = this.$('.car-section');
        (addCars = (function(_this) {
          return function() {
            var $li, car, cars, checked, _i, _len, _ref, _results;
            cars = ['ArbusuG', 'Mayhem', 'Icarus'];
            _this.$('.statusbarcar').remove();
            _ref = cars.reverse();
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              car = _ref[_i];
              checked = prefs.car === car;
              $li = $(templateCar({
                car: car,
                checked: checked
              }));
              _results.push($li.insertAfter($carSection));
            }
            return _results;
          };
        })(this))();
        this.listenTo(root, 'change:user', addCars);
        $trackInfo = this.$('.trackinfo');
        $trackName = $trackInfo.find('.name');
        $trackAuthor = $trackInfo.find('.author');
        $trackLinkDrive = $trackInfo.find('.drive');
        $trackLinkEdit = $trackInfo.find('.edit');
        $trackLinkInfo = $trackInfo.find('.info');
        $favorite = this.$('.favorite');
        this.favoriteView = null;
        if (root.track) {
          this.favoriteView = new FavoriteView(root.track, root);
          $favorite.html(this.favoriteView.el);
        }
        this.listenTo(root, 'change:track', (function(_this) {
          return function() {
            var _ref;
            if ((_ref = _this.favoriteView) != null) {
              _ref.destroy();
            }
            _this.favoriteView = new FavoriteView(root.track, root);
            return $favorite.html(_this.favoriteView.el);
          };
        })(this));
        this.listenTo(root, 'change:track.id', function() {
          var id;
          id = root.track.id;
          $trackName.attr('href', "/track/" + id);
          $trackLinkDrive.attr('href', "/track/" + id + "/drive");
          $trackLinkEdit.attr('href', "/track/" + id + "/edit");
          return $trackLinkInfo.attr('href', "/track/" + id);
        });
        this.listenTo(root, 'change:track.name', function() {
          return $trackName.text(root.track.name);
        });
        trackUserView = null;
        this.listenTo(root, 'change:track.user', function() {
          if (root.track.user === (trackUserView != null ? trackUserView.model : void 0)) {
            return;
          }
          if (trackUserView != null) {
            trackUserView.destroy();
          }
          if (root.track.user != null) {
            trackUserView = new UserView({
              model: root.track.user
            });
            $trackAuthor.empty();
            return $trackAuthor.append(trackUserView.el);
          }
        });
        $myTracks = this.$('.mytracks');
        (updateMyTracks = function() {
          $myTracks.toggleClass('hidden', !root.user);
          if (root.user) {
            return $myTracks.attr('href', "/user/" + root.user.id + "/tracks");
          }
        })();
        this.listenTo(root, 'change:user', updateMyTracks);
        $myFavorites = this.$('.myfavorites');
        (updateMyFavorites = function() {
          $myFavorites.toggleClass('hidden', !root.user);
          if (root.user) {
            return $myFavorites.attr('href', "/user/" + root.user.id + "/favorites");
          }
        })();
        this.listenTo(root, 'change:user', updateMyFavorites);
        this.listenTo(Backbone, 'statusbar:showchallenge', (function(_this) {
          return function() {
            return _this.$('.challenge').removeClass('hidden');
          };
        })(this));
        return this.listenTo(Backbone, 'statusbar:hidechallenge', (function(_this) {
          return function() {
            return _this.$('.challenge').addClass('hidden');
          };
        })(this));
      };

      StatusBarView.prototype.height = function() {
        return this.$el.height();
      };

      StatusBarView.prototype.destroy = function() {
        return this.favoriteView.destroy();
      };

      return StatusBarView;

    })(View);
  });

}).call(this);
