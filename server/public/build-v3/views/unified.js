// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone-full', 'underscore', 'views/view', 'views/credits', 'views/statusbar', 'client/client', 'jade!templates/unified', 'util/popup'], function(Backbone, _, View, CreditsView, StatusBarView, TriggerClient, template, popup) {
    var $, UnifiedView;
    $ = Backbone.$;
    return UnifiedView = (function(_super) {
      var lastTime;

      __extends(UnifiedView, _super);

      UnifiedView.prototype.el = '#unified-container';

      UnifiedView.prototype.template = template;

      function UnifiedView(app) {
        this.app = app;
        this.update = __bind(this.update, this);
        UnifiedView.__super__.constructor.call(this);
        this.currentView3D = null;
        this.currentViewChild = null;
        this.currentDialog = null;
      }

      UnifiedView.prototype.afterRender = function() {
        var $child, $document, $scaledUi, $statusMessage, $view3d, $window, client, creditsView, doLogin, layout, statusBarView;
        statusBarView = new StatusBarView(this.app);
        statusBarView.render();
        $window = $(window);
        $document = $(document);
        $view3d = this.$('#view3d');
        $child = this.$child = this.$('#unified-child');
        $statusMessage = this.$('#status-message');
        $scaledUi = this.$('#scaled-ui');
        client = this.client = new TriggerClient($view3d[0], this.app.root);
        client.camera.eulerOrder = 'ZYX';
        creditsView = new CreditsView(this.app, client);
        creditsView.render();
        $document.on('keyup', (function(_this) {
          return function(event) {
            var _ref;
            client.onKeyUp(event);
            return (_ref = _this.currentView3D) != null ? typeof _ref.onKeyUp === "function" ? _ref.onKeyUp(event) : void 0 : void 0;
          };
        })(this));
        $document.on('keydown', (function(_this) {
          return function(event) {
            var _ref;
            client.onKeyDown(event);
            return (_ref = _this.currentView3D) != null ? typeof _ref.onKeyDown === "function" ? _ref.onKeyDown(event) : void 0 : void 0;
          };
        })(this));
        $view3d.on('mousedown', (function(_this) {
          return function(event) {
            var _ref;
            return (_ref = _this.currentView3D) != null ? typeof _ref.onMouseDown === "function" ? _ref.onMouseDown(event) : void 0 : void 0;
          };
        })(this));
        $view3d.on('mousemove', (function(_this) {
          return function(event) {
            var _ref;
            return (_ref = _this.currentView3D) != null ? typeof _ref.onMouseMove === "function" ? _ref.onMouseMove(event) : void 0 : void 0;
          };
        })(this));
        $view3d.on('mouseout', (function(_this) {
          return function(event) {
            var _ref;
            return (_ref = _this.currentView3D) != null ? typeof _ref.onMouseOut === "function" ? _ref.onMouseOut(event) : void 0 : void 0;
          };
        })(this));
        $view3d.on('mouseup', (function(_this) {
          return function(event) {
            var _ref;
            return (_ref = _this.currentView3D) != null ? typeof _ref.onMouseUp === "function" ? _ref.onMouseUp(event) : void 0 : void 0;
          };
        })(this));
        $view3d.on('mousewheel', (function(_this) {
          return function(event) {
            var _ref;
            return (_ref = _this.currentView3D) != null ? typeof _ref.onMouseWheel === "function" ? _ref.onMouseWheel(event) : void 0 : void 0;
          };
        })(this));
        (layout = function() {
          var aspect, cx, cy, fontSize, height, statusbarHeight, targetAspect, width;
          statusbarHeight = statusBarView.height();
          $view3d.css('top', statusbarHeight);
          $child.css('top', statusbarHeight);
          width = $view3d.width();
          height = $window.height() - statusbarHeight;
          $view3d.height(height);
          client.setSize(width, height);
          cx = 32;
          cy = 18;
          targetAspect = cx / cy;
          aspect = width / height;
          fontSize = aspect >= targetAspect ? height / cy : width / cx;
          return $scaledUi.css("font-size", "" + fontSize + "px");
        })();
        $window.on('resize', layout);
        $document.on('click', 'a.route', function(event) {
          Backbone.history.navigate(this.pathname, {
            trigger: true
          });
          return false;
        });
        $document.on('click', 'a.outgoing', function(event) {
          _gaq.push(['_trackEvent', 'Outgoing link', 'click', this.href]);
          ga('send', 'event', 'Outgoing link', 'click', this.href);
          _.delay(((function(_this) {
            return function() {
              return document.location.href = _this.href;
            };
          })(this)), 100);
          return false;
        });
        doLogin = function() {
          return popup.create("/login?popup=1", "Login", function() {
            return Backbone.trigger('app:checklogin');
          });
        };
        Backbone.on('app:dologin', doLogin);
        $document.on('click', 'a.login', function(event) {
          return !doLogin();
        });
        $document.on('click', 'a.logout', function(event) {
          $.ajax('/v1/auth/logout').done(function(data) {
            return Backbone.trigger('app:logout');
          });
          return false;
        });
        Backbone.on('app:status', function(msg) {
          $statusMessage.text(msg);
          $statusMessage.removeClass('fadeout');
          return _.defer(function() {
            return $statusMessage.addClass('fadeout');
          });
        });
        return requestAnimationFrame(this.update);
      };

      lastTime = null;

      UnifiedView.prototype.update = function(time) {
        var deltaTime, e, _ref, _ref1, _ref2;
        lastTime || (lastTime = time);
        deltaTime = Math.max(0, Math.min(0.1, (time - lastTime) * 0.001));
        lastTime = time;
        if ((_ref = this.currentView3D) != null) {
          if (typeof _ref.update === "function") {
            _ref.update(deltaTime, time);
          }
        }
        if (this.currentViewChild !== this.currentView3D) {
          if ((_ref1 = this.currentViewChild) != null) {
            if (typeof _ref1.update === "function") {
              _ref1.update(deltaTime, time);
            }
          }
        }
        if ((_ref2 = this.currentDialog) != null) {
          if (typeof _ref2.update === "function") {
            _ref2.update(deltaTime, time);
          }
        }
        this.client.update(deltaTime);
        try {
          this.client.render();
        } catch (_error) {
          e = _error;
          Backbone.trigger('app:webglerror');
        }
        return requestAnimationFrame(this.update);
      };

      UnifiedView.prototype.getView3D = function() {
        return this.currentView3D;
      };

      UnifiedView.prototype.getViewChild = function() {
        return this.currentViewChild;
      };

      UnifiedView.prototype.getDialog = function() {
        return this.currentDialog;
      };

      UnifiedView.prototype.setView3D = function(view) {
        if (this.currentView3D) {
          this.currentView3D.destroy();
        }
        if (this.currentView3D === this.currentViewChild) {
          this.currentViewChild = null;
          this.$child.empty();
        }
        this.currentView3D = view;
      };

      UnifiedView.prototype.setViewChild = function(view) {
        if (this.currentViewChild) {
          this.currentViewChild.destroy();
          this.$child.empty();
          if (this.currentView3D === this.currentViewChild) {
            this.currentView3D = null;
          }
        }
        this.currentViewChild = view;
        if (view) {
          this.$child.append(view.el);
        }
      };

      UnifiedView.prototype.setViewBoth = function(view) {
        if (this.currentViewChild) {
          this.currentViewChild.destroy();
          if (this.currentView3D === this.currentViewChild) {
            this.currentView3D = null;
          }
        }
        if (this.currentView3D) {
          this.currentView3D.destroy();
        }
        if (view) {
          this.$child.empty().append(view.el);
        }
        this.currentViewChild = this.currentView3D = view;
      };

      UnifiedView.prototype.setDialog = function(view) {
        var _ref;
        if ((_ref = this.currentDialog) != null) {
          _ref.destroy();
        }
        this.currentDialog = view;
        if (view) {
          this.$child.append(view.el);
        }
      };

      return UnifiedView;

    })(View);
  });

}).call(this);
