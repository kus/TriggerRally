// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['backbone-full', 'underscore', 'views/view', 'jade!templates/packa', 'util/popup'], function(Backbone, _, View, template, popup) {
    var MayhemView, defaultPrice, priceMessages, productId;
    productId = 'packa';
    priceMessages = {
      a: 'For <b>5.99 USD</b> you get:'
    };
    defaultPrice = '5';
    return MayhemView = (function(_super) {
      __extends(MayhemView, _super);

      MayhemView.prototype.template = template;

      function MayhemView(app, client) {
        this.app = app;
        this.client = client;
        MayhemView.__super__.constructor.call(this);
      }

      MayhemView.prototype.initialize = function() {
        this.listenTo(this.app.root, 'change:user', (function(_this) {
          return function() {
            return _this.render();
          };
        })(this));
        return this.listenTo(this.app.root, 'change:user.products', (function(_this) {
          return function() {
            return _this.render();
          };
        })(this));
      };

      MayhemView.prototype.viewModel = function() {
        var key, pmkey, pmkeys, products, _ref, _ref1;
        pmkeys = (function() {
          var _results;
          _results = [];
          for (key in priceMessages) {
            _results.push(key);
          }
          return _results;
        })();
        pmkey = this.pmkey = pmkeys[Math.floor(Math.random() * pmkeys.length)];
        products = (_ref = (_ref1 = this.app.root.user) != null ? _ref1.products : void 0) != null ? _ref : [];
        return {
          purchased: __indexOf.call(products, productId) >= 0,
          user: this.app.root.user,
          pmkey: pmkey,
          priceHtml: priceMessages[pmkey],
          checkedPrice: defaultPrice
        };
      };

      MayhemView.prototype.nullUrl = function() {
        return "javascript:;";
      };

      MayhemView.prototype.checkoutUrl = function(amt) {
        return "/checkout?pmkey=" + this.pmkey + "&method=paypal&cur=USD&amt=" + amt + "&pack=full";
      };

      MayhemView.prototype.afterRender = function() {
        var $checkout, $customPriceRadio, $customprice, $messageminimum, $messagepaypal, checkoutUrl, clearMessages, price, root, updateCustomPrice;
        root = this.app.root;
        $customprice = this.$('.checkout-box .customprice');
        $messageminimum = this.$('.checkout-box .message.minimum');
        $messagepaypal = this.$('.checkout-box .message.paypal');
        $checkout = this.$('.checkout-box a.checkout');
        $customPriceRadio = this.$('.checkout-box input:radio[value=\"custom\"]');
        clearMessages = function() {
          $messageminimum.addClass('zeroalpha');
          return $messagepaypal.addClass('zeroalpha');
        };
        price = defaultPrice;
        checkoutUrl = (function(_this) {
          return function() {
            return "/checkout?pmkey=" + _this.pmkey + "&method=paypal&cur=USD&amt=" + price + "&pack=full";
          };
        })(this);
        this.$(".checkout-box input:radio[value=\"" + defaultPrice + "\"]").prop('checked', true);
        updateCustomPrice = function(event) {
          var inp, val, _ref;
          $customPriceRadio.prop('checked', true);
          inp = $customprice.val();
          while ((_ref = inp[0]) === '$' || _ref === '-') {
            inp = inp.slice(1);
          }
          inp = inp.replace(',', '.');
          inp = parseFloat(inp);
          clearMessages();
          if (Number.isNaN(inp)) {
            $messageminimum.removeClass('zeroalpha');
            return price = null;
          } else {
            val = inp.toFixed(2);
            $customprice.val("$" + val);
            if (inp <= 0.31) {
              $messagepaypal.removeClass('zeroalpha');
            }
            if (inp < 0.01) {
              $messageminimum.removeClass('zeroalpha');
              return price = null;
            } else {
              val = inp.toFixed(2);
              return price = val;
            }
          }
        };
        this.$('.checkout-box input:radio').on('change', function(event) {
          if (this.value === 'custom') {
            $customprice.removeClass('zeroalpha');
            return updateCustomPrice();
          } else {
            return price = this.value;
          }
        });
        $customprice.on('change', updateCustomPrice);
        this.$('.checkout').on('click', function() {
          var result;
          if (!price) {
            return false;
          }
          result = popup.create(checkoutUrl(), "Checkout", function() {
            return root.user.fetch({
              force: true
            });
          });
          if (!result) {
            alert('Popup window was blocked!');
          }
          return false;
        });
      };

      return MayhemView;

    })(View);
  });

}).call(this);
