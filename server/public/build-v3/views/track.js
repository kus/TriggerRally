// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'backbone-full', 'views/favorite', 'views/user', 'views/view', 'views/view_collection', 'models/index', 'jade!templates/track', 'jade!templates/trackrun', 'util/popup'], function($, Backbone, FavoriteView, UserView, View, ViewCollection, models, template, templateRun, popup) {
    var TrackRunView, TrackRunsView, TrackView, loadingText;
    loadingText = '...';
    TrackRunView = (function(_super) {
      __extends(TrackRunView, _super);

      function TrackRunView() {
        return TrackRunView.__super__.constructor.apply(this, arguments);
      }

      TrackRunView.prototype.template = templateRun;

      TrackRunView.prototype.tagName = 'tr';

      TrackRunView.prototype.initialize = function() {
        return this.model.fetch();
      };

      TrackRunView.prototype.viewModel = function() {
        var data;
        data = TrackRunView.__super__.viewModel.apply(this, arguments);
        if (data.name == null) {
          data.name = loadingText;
        }
        if (data.modified_ago == null) {
          data.modified_ago = loadingText;
        }
        if (data.user == null) {
          data.user = null;
        }
        return data;
      };

      TrackRunView.prototype.afterRender = function() {
        var $runuser, run, updateUserView;
        run = this.model;
        $runuser = this.$('.runuser');
        this.userView = null;
        (updateUserView = (function(_this) {
          return function() {
            var _ref;
            if ((_ref = _this.userView) != null) {
              _ref.destroy();
            }
            _this.userView = run.user && new UserView({
              model: run.user
            });
            $runuser.empty();
            if (_this.userView) {
              return $runuser.append(_this.userView.el);
            }
          };
        })(this))();
        return this.listenTo(run, 'change:user', updateUserView);
      };

      TrackRunView.prototype.destroy = function() {
        this.userView.destroy();
        return TrackRunView.__super__.destroy.apply(this, arguments);
      };

      return TrackRunView;

    })(View);
    TrackRunsView = (function(_super) {
      __extends(TrackRunsView, _super);

      function TrackRunsView() {
        return TrackRunsView.__super__.constructor.apply(this, arguments);
      }

      TrackRunsView.prototype.view = TrackRunView;

      TrackRunsView.prototype.childOffset = 1;

      TrackRunsView.prototype.initialize = function() {
        TrackRunsView.__super__.initialize.apply(this, arguments);
        return this.listenTo(this.collection, 'change', (function(_this) {
          return function() {
            return _this.render();
          };
        })(this));
      };

      return TrackRunsView;

    })(ViewCollection);
    return TrackView = (function(_super) {
      __extends(TrackView, _super);

      TrackView.prototype.template = template;

      function TrackView(model, app, client) {
        this.app = app;
        this.client = client;
        TrackView.__super__.constructor.call(this, {
          model: model
        });
      }

      TrackView.prototype.initialize = function() {
        var track;
        Backbone.trigger('app:settitle', this.model.name);
        this.listenTo(this.model, 'change:name', (function(_this) {
          return function() {
            return Backbone.trigger('app:settitle', _this.model.name);
          };
        })(this));
        this.listenTo(this.model, 'change:id', (function(_this) {
          return function() {
            return _this.render();
          };
        })(this));
        track = this.model;
        return track.fetch({
          success: function() {
            return track.env.fetch({
              success: function() {
                return Backbone.trigger('app:settrack', track);
              }
            });
          },
          error: function() {
            return Backbone.trigger('app:notfound');
          }
        });
      };

      TrackView.prototype.viewModel = function() {
        var data;
        data = TrackView.__super__.viewModel.apply(this, arguments);
        if (data.name == null) {
          data.name = loadingText;
        }
        if (data.count_drive == null) {
          data.count_drive = loadingText;
        }
        if (data.count_copy == null) {
          data.count_copy = loadingText;
        }
        if (data.count_fav == null) {
          data.count_fav = loadingText;
        }
        return data;
      };

      TrackView.prototype.afterRender = function() {
        var $author, $count_copy, $count_drive, $count_fav, $favorite, $name, track, trackRuns, trackRunsView, updateUserView;
        track = this.model;
        trackRuns = models.TrackRuns.findOrCreate(track.id);
        trackRunsView = new TrackRunsView({
          collection: trackRuns.runs,
          el: this.$('table.runlist')
        });
        trackRunsView.render();
        trackRuns.fetch();
        $author = this.$('.author');
        this.userView = null;
        (updateUserView = (function(_this) {
          return function() {
            var _ref;
            if ((_ref = _this.userView) != null) {
              _ref.destroy();
            }
            _this.userView = track.user && new UserView({
              model: track.user
            });
            $author.empty();
            if (_this.userView) {
              return $author.append(_this.userView.el);
            }
          };
        })(this))();
        this.listenTo(track, 'change:user', updateUserView);
        $favorite = this.$('.favorite');
        this.favoriteView = new FavoriteView(track, this.app.root);
        $favorite.html(this.favoriteView.el);
        $name = this.$('.name');
        this.listenTo(this.model, 'change:name', (function(_this) {
          return function(model, value) {
            return $name.text(value);
          };
        })(this));
        $count_drive = this.$('.count_drive');
        this.listenTo(this.model, 'change:count_drive', (function(_this) {
          return function(model, value) {
            return $count_drive.text(value);
          };
        })(this));
        $count_copy = this.$('.count_copy');
        this.listenTo(this.model, 'change:count_copy', (function(_this) {
          return function(model, value) {
            return $count_copy.text(value);
          };
        })(this));
        $count_fav = this.$('.count_fav');
        return this.listenTo(this.model, 'change:count_fav', (function(_this) {
          return function(model, value) {
            return $count_fav.text(value);
          };
        })(this));
      };

      return TrackView;

    })(View);
  });

}).call(this);
