// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(['jquery', 'underscore', 'backbone-full', 'models/index', 'router', 'views/notfound', 'views/purchase', 'views/unified'], function($, _, Backbone, models, Router, NotFoundView, PurchaseView, UnifiedView) {
    var App, ExperimentsModel, PrefsModel, RootModel, jsonClone, probability, randRange, syncLocalStorage;
    jsonClone = function(obj) {
      return JSON.parse(JSON.stringify(obj));
    };
    syncLocalStorage = function(method, model, options) {
      var data, key;
      key = model.constructor.name;
      switch (method) {
        case 'read':
          data = JSON.parse(localStorage.getItem(key));
          if (data == null) {
            data = {
              id: 1
            };
          }
          model.set(model.parse(data));
          break;
        case 'update':
          localStorage.setItem(key, JSON.stringify(model));
      }
    };
    RootModel = (function(_super) {
      __extends(RootModel, _super);

      function RootModel() {
        return RootModel.__super__.constructor.apply(this, arguments);
      }

      models.buildProps(RootModel, ['track', 'user', 'prefs', 'xp']);

      RootModel.prototype.bubbleAttribs = ['track', 'user', 'prefs'];

      RootModel.prototype.getCarId = function() {
        var cars, _ref, _ref1;
        cars = (_ref = this.user) != null ? _ref.cars() : void 0;
        if (!((cars != null) && (_ref1 = this.prefs.car, __indexOf.call(cars, _ref1) >= 0))) {
          return null;
        }
        return this.prefs.car;
      };

      return RootModel;

    })(models.Model);
    PrefsModel = (function(_super) {
      __extends(PrefsModel, _super);

      function PrefsModel() {
        return PrefsModel.__super__.constructor.apply(this, arguments);
      }

      PrefsModel.prototype.sync = syncLocalStorage;

      models.buildProps(PrefsModel, ['antialias', 'audio', 'car', 'challenge', 'musicplay', 'musicvolume', 'pixeldensity', 'shadows', 'terrainhq', 'volume']);

      PrefsModel.prototype.defaults = function() {
        return {
          antialias: true,
          audio: true,
          car: 'ArbusuG',
          challenge: 'world',
          musicplay: false,
          musicvolume: 0.5,
          pixeldensity: 1,
          shadows: true,
          terrainhq: true,
          volume: 0.8
        };
      };

      return PrefsModel;

    })(models.Model);
    randRange = function(range) {
      return Math.floor(Math.random() * range);
    };
    probability = function(prob) {
      return Math.floor(Math.random() + prob);
    };
    ExperimentsModel = (function(_super) {
      var n;

      __extends(ExperimentsModel, _super);

      function ExperimentsModel() {
        return ExperimentsModel.__super__.constructor.apply(this, arguments);
      }

      ExperimentsModel.prototype.sync = syncLocalStorage;

      models.buildProps(ExperimentsModel, (function() {
        var _i, _results;
        _results = [];
        for (n = _i = 2; _i <= 3; n = ++_i) {
          _results.push("dimension" + n);
        }
        return _results;
      })());

      ExperimentsModel.prototype.initialize = function() {
        this.fetch();
        this.save();
        return ga('set', _.omit(this.attributes, 'id'));
      };

      ExperimentsModel.prototype.defaults = function() {
        return {
          'dimension2': 0,
          'dimension3': 0
        };
      };

      return ExperimentsModel;

    })(models.BackboneModel);
    return App = (function() {
      function App() {
        var found;
        this.root = new RootModel({
          user: null,
          track: null,
          prefs: new PrefsModel,
          xp: new ExperimentsModel
        });
        this.root.prefs.fetch();
        this.root.prefs.on('change', (function(_this) {
          return function() {
            return _this.root.prefs.save();
          };
        })(this));
        this.unifiedView = (new UnifiedView(this)).render();
        this.router = new Router(this);
        this.router.on('route', function() {
          window._gaq.push(['_trackPageview']);
          return ga('send', 'pageview');
        });
        Backbone.on('app:settrack', this.setTrack, this);
        Backbone.on('app:checklogin', this.checkUserLogin, this);
        Backbone.on('app:logout', this.logout, this);
        Backbone.on('app:settitle', this.setTitle, this);
        Backbone.on('app:webglerror', function() {
          return Backbone.history.navigate('/about', {
            trigger: true
          });
        });
        Backbone.on('app:notfound', this.notFound, this);
        this.checkUserLogin();
        found = Backbone.history.start({
          pushState: true
        });
        if (!found) {
          Backbone.trigger('app:notfound');
        }
        if (!this.unifiedView.client.renderer) {
          if (location.pathname !== '/about') {
            Backbone.trigger('app:webglerror');
          }
        }
      }

      App.prototype.notFound = function() {
        this.router.setSpin();
        return this.router.uni.setViewChild((new NotFoundView).render());
      };

      App.prototype.setTrack = function(track, fromRouter) {
        var lastTrack;
        lastTrack = this.root.track;
        if (track === lastTrack) {
          track.trigger('change');
          return;
        }
        this.root.track = track;
        if (track.env !== (lastTrack != null ? lastTrack.env : void 0)) {
          track.trigger('change:env');
        }
        track.trigger('change:id');
        track.trigger('change:name');
        track.trigger('change:published');
        track.trigger('change:user');
        track.trigger('change:config.course.checkpoints.');
        track.trigger('change:config.course.startposition.');
        track.trigger('change:config.scenery.');
        return track.trigger('change');
      };

      App.prototype.checkUserLogin = function() {
        return $.ajax('/v1/auth/me').done((function(_this) {
          return function(data) {
			  return Backbone.trigger('app:status', 'Logged in');
            var user;
            if (data.user) {
              _gaq.push(['_setCustomVar', 1, 'User Type', 'Registered', 2]);
              ga('set', 'dimension1', 'Registered');
              user = models.User.findOrCreate(data.user.id);
              user.set(user.parse(data.user));
              _this.root.user = user;
              return Backbone.trigger('app:status', 'Logged in');
            } else {
              return _this.logout();
            }
          };
        })(this));
      };

      App.prototype.logout = function() {
        _gaq.push(['_setCustomVar', 1, 'User Type', 'Visitor', 2]);
        ga('set', 'dimension1', 'Visitor');
        this.root.user = null;
        return Backbone.trigger('app:status', 'Logged out');
      };

      App.prototype.setTitle = function(title) {
        var main;
        main = "Trigger Rally";
        return document.title = title ? "" + title + " - " + main : main;
      };

      App.prototype.showCreditPurchaseDialog = function() {
        var purchaseView;
        purchaseView = new PurchaseView(this.root.user, this, this.unifiedView.client);
        this.unifiedView.setDialog(purchaseView);
        purchaseView.render();
      };

      return App;

    })();
  });

}).call(this);
