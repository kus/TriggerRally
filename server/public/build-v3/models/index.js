// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function(factory) {
    if (typeof define === "function" && define.amd) {
      return define(["exports", "backbone-full", "underscore"], factory);
    } else if (typeof exports === "object") {
      return factory(exports, require("backbone"), require("underscore"));
    } else {
      throw new Error("Couldn't determine module type.");
    }
  })(function(exports, Backbone, _) {
    var Car, CarCollection, Checkpoint, CheckpointsCollection, Collection, Course, Env, EnvCollection, Model, PathCollection, Run, RunCollection, StartPos, Track, TrackCollection, TrackCollectionSortModified, TrackCollectionSortName, TrackConfig, TrackRuns, TrackSet, User, UserCollection, UserPassport, buildProps, createAttributeMonitor, k, models, v;
    buildProps = function(constructor, attribNames) {
      var buildGetter, buildSetter, prop, _i, _len, _results;
      buildGetter = function(name) {
        return function() {
          return this.get(name);
        };
      };
      buildSetter = function(name) {
        return function(value) {
          return this.set(name, value);
        };
      };
      _results = [];
      for (_i = 0, _len = attribNames.length; _i < _len; _i++) {
        prop = attribNames[_i];
        _results.push(Object.defineProperty(constructor.prototype, prop, {
          get: buildGetter(prop),
          set: buildSetter(prop)
        }));
      }
      return _results;
    };
    createAttributeMonitor = function() {
      var monitored;
      monitored = Object.create(null);
      return function(parentModel, attrib, newValue, options) {
        var attribValue, event, onAll;
        onAll = function(event, model, value, options) {
          var newEvent, split;
          split = event.split(':');
          if (split[1] == null) {
            split[1] = "";
          }
          newEvent = "" + split[0] + ":" + attrib + "." + split[1];
          return parentModel.trigger(newEvent, model, value, options);
        };
        attribValue = parentModel.get(attrib);
        if (monitored[attrib] != null) {
          if (attribValue === monitored[attrib]) {
            return;
          }
          monitored[attrib].off('all', onAll);
        }
        if (attribValue instanceof Backbone.Model || attribValue instanceof Backbone.Collection) {
          monitored[attrib] = attribValue;
          attribValue.on('all', onAll);
        }
        if (newValue != null) {
          event = "change:" + attrib + ".";
          return parentModel.trigger(event, newValue, options);
        }
      };
    };
    Model = Model = (function(_super) {
      __extends(Model, _super);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.bubbleAttribs = null;

      Model.findOrCreate = function(id) {
        var model, _ref, _ref1;
        model = (_ref = this.prototype.all) != null ? _ref.get(id) : void 0;
        if (!model) {
          model = new this({
            id: id
          });
          if ((_ref1 = this.prototype.all) != null) {
            _ref1.add(model);
          }
        }
        return model;
      };

      Model.prototype.cacheExpirySecs = 1;

      Model.prototype.fetch = function(options) {
        var timeSinceLast, xhr;
        if (options == null) {
          options = {};
        }
        if (this.lastSync && !(options != null ? options.force : void 0)) {
          timeSinceLast = Date.now() - this.lastSync;
          if (timeSinceLast < this.cacheExpirySecs * 1000) {
            if (typeof options.success === "function") {
              options.success(this, null, options);
            }
            return null;
          }
        }
        xhr = this.fetchXHR;
        if (xhr) {
          xhr.done((function(_this) {
            return function(data, textStatus, jqXHR) {
              return typeof options.success === "function" ? options.success(_this, data, options) : void 0;
            };
          })(this));
          xhr.fail((function(_this) {
            return function(data, textStatus, errorThrown) {
              return typeof options.error === "function" ? options.error(_this, null, options) : void 0;
            };
          })(this));
        } else {
          xhr = Model.__super__.fetch.apply(this, arguments);
          if (xhr != null ? xhr.always : void 0) {
            this.fetchXHR = xhr;
            xhr.always((function(_this) {
              return function() {
                return _this.fetchXHR = null;
              };
            })(this));
          }
        }
        return xhr;
      };

      Model.prototype.parse = function(response, options) {
        this.lastSync = Date.now();
        return Model.__super__.parse.apply(this, arguments);
      };

      Model.prototype.initialize = function() {
        var bubbleAttribs, monitor, _ref;
        this.fetchXHR = null;
        monitor = createAttributeMonitor();
        bubbleAttribs = (_ref = this.bubbleAttribs) != null ? _ref : [];
        bubbleAttribs.forEach((function(_this) {
          return function(attrib) {
            monitor(_this, attrib);
            return _this.on("change:" + attrib, function(model, value, options) {
              return monitor(_this, attrib, value, options);
            });
          };
        })(this));
        return Model.__super__.initialize.apply(this, arguments);
      };

      return Model;

    })(Backbone.Model);
    Collection = (function(_super) {
      __extends(Collection, _super);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      return Collection;

    })(Backbone.Collection);
    PathCollection = (function(_super) {
      __extends(PathCollection, _super);

      function PathCollection() {
        return PathCollection.__super__.constructor.apply(this, arguments);
      }

      PathCollection.prototype.url = "/v1/" + PathCollection.path;

      return PathCollection;

    })(Collection);
    CarCollection = (function(_super) {
      __extends(CarCollection, _super);

      function CarCollection() {
        return CarCollection.__super__.constructor.apply(this, arguments);
      }

      CarCollection.prototype.path = 'cars';

      return CarCollection;

    })(PathCollection);
    EnvCollection = (function(_super) {
      __extends(EnvCollection, _super);

      function EnvCollection() {
        return EnvCollection.__super__.constructor.apply(this, arguments);
      }

      EnvCollection.prototype.path = 'envs';

      return EnvCollection;

    })(PathCollection);
    RunCollection = (function(_super) {
      __extends(RunCollection, _super);

      function RunCollection() {
        return RunCollection.__super__.constructor.apply(this, arguments);
      }

      RunCollection.prototype.path = 'runs';

      return RunCollection;

    })(PathCollection);
    TrackCollection = (function(_super) {
      __extends(TrackCollection, _super);

      function TrackCollection() {
        return TrackCollection.__super__.constructor.apply(this, arguments);
      }

      TrackCollection.prototype.path = 'tracks';

      return TrackCollection;

    })(PathCollection);
    UserCollection = (function(_super) {
      __extends(UserCollection, _super);

      function UserCollection() {
        return UserCollection.__super__.constructor.apply(this, arguments);
      }

      UserCollection.prototype.path = 'users';

      return UserCollection;

    })(PathCollection);
    TrackCollectionSortName = (function(_super) {
      __extends(TrackCollectionSortName, _super);

      function TrackCollectionSortName() {
        return TrackCollectionSortName.__super__.constructor.apply(this, arguments);
      }

      TrackCollectionSortName.prototype.comparator = 'name';

      return TrackCollectionSortName;

    })(TrackCollection);
    TrackCollectionSortModified = (function(_super) {
      __extends(TrackCollectionSortModified, _super);

      function TrackCollectionSortModified() {
        return TrackCollectionSortModified.__super__.constructor.apply(this, arguments);
      }

      TrackCollectionSortModified.prototype.comparator = function(a, b) {
        if ((a.modified == null) || (b.modified == null) || a.modified === b.modified) {
          return a.cid - b.cid;
        } else if (a.modified < b.modified) {
          return 1;
        } else {
          return -1;
        }
      };

      return TrackCollectionSortModified;

    })(TrackCollection);
    Checkpoint = (function(_super) {
      __extends(Checkpoint, _super);

      function Checkpoint() {
        return Checkpoint.__super__.constructor.apply(this, arguments);
      }

      buildProps(Checkpoint, ['disp', 'pos', 'surf']);

      return Checkpoint;

    })(Model);
    CheckpointsCollection = (function(_super) {
      __extends(CheckpointsCollection, _super);

      function CheckpointsCollection() {
        return CheckpointsCollection.__super__.constructor.apply(this, arguments);
      }

      CheckpointsCollection.prototype.model = Checkpoint;

      return CheckpointsCollection;

    })(Collection);
    StartPos = (function(_super) {
      __extends(StartPos, _super);

      function StartPos() {
        return StartPos.__super__.constructor.apply(this, arguments);
      }

      buildProps(StartPos, ['pos', 'rot']);

      return StartPos;

    })(Model);
    Course = (function(_super) {
      __extends(Course, _super);

      function Course() {
        return Course.__super__.constructor.apply(this, arguments);
      }

      buildProps(Course, ['checkpoints', 'startposition']);

      Course.prototype.bubbleAttribs = ['checkpoints', 'startposition'];

      Course.prototype.defaults = function() {
        return {
          startposition: new StartPos,
          checkpoints: new CheckpointsCollection
        };
      };

      Course.prototype.parse = function(response, options) {
        var c, checkpoint, checkpoints, data;
        data = Course.__super__.parse.apply(this, arguments);
        if (!data) {
          return data;
        }
        if (data.startposition) {
          this.startposition.set(this.startposition.parse(data.startposition));
          data.startposition = this.startposition;
        }
        if (data.checkpoints) {
          checkpoints = (function() {
            var _i, _len, _ref, _results;
            _ref = data.checkpoints;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              checkpoint = _ref[_i];
              c = new Checkpoint;
              c.set(c.parse(checkpoint));
              _results.push(c);
            }
            return _results;
          })();
          this.checkpoints.reset(checkpoints);
          data.checkpoints = this.checkpoints;
        }
        return data;
      };

      return Course;

    })(Model);
    TrackConfig = (function(_super) {
      __extends(TrackConfig, _super);

      function TrackConfig() {
        return TrackConfig.__super__.constructor.apply(this, arguments);
      }

      buildProps(TrackConfig, ['course', 'gameversion', 'scenery']);

      TrackConfig.prototype.bubbleAttribs = ['course'];

      TrackConfig.prototype.defaults = function() {
        return {
          course: new Course
        };
      };

      TrackConfig.prototype.parse = function(response, options) {
        var course, data;
        data = TrackConfig.__super__.parse.apply(this, arguments);
        if (!data) {
          return data;
        }
        if (data.course) {
          course = this.course;
          data.course = course.set(course.parse(data.course));
        }
        return data;
      };

      return TrackConfig;

    })(Model);
    Car = (function(_super) {
      __extends(Car, _super);

      function Car() {
        return Car.__super__.constructor.apply(this, arguments);
      }

      Car.prototype.all = new (Collection.extend({
        model: Car
      }));

      buildProps(Car, ['config', 'name', 'user', 'product']);

      Car.prototype.urlRoot = '/v1/cars';

      Car.prototype.toJSON = function(options) {
        var data;
        data = Car.__super__.toJSON.apply(this, arguments);
        delete data.created;
        if (data.user != null) {
          data.user = data.user.id;
        }
        return data;
      };

      return Car;

    })(Model);
    Env = (function(_super) {
      __extends(Env, _super);

      function Env() {
        return Env.__super__.constructor.apply(this, arguments);
      }

      Env.prototype.all = new (Collection.extend({
        model: Env
      }));

      buildProps(Env, ['desc', 'name', 'cars', 'gameversion', 'scenery', 'terrain']);

      Env.prototype.urlRoot = '/v1/envs';

      Env.prototype.defaults = function() {
        return {
          cars: new CarCollection
        };
      };

      Env.prototype.toJSON = function(options) {
        var car, data;
        data = Env.__super__.toJSON.apply(this, arguments);
        if (data.cars != null) {
          data.cars = (function() {
            var _i, _len, _ref, _results;
            _ref = data.cars.models;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              car = _ref[_i];
              _results.push(car.id);
            }
            return _results;
          })();
        }
        return data;
      };

      Env.prototype.parse = function(response, options) {
        var c, car, cars, data;
        data = Env.__super__.parse.apply(this, arguments);
        if (!data) {
          return data;
        }
        if (data.cars) {
          cars = (function() {
            var _i, _len, _ref, _results;
            _ref = data.cars;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              car = _ref[_i];
              if (typeof car === 'string') {
                _results.push(Car.findOrCreate(car));
              } else {
                c = Car.findOrCreate(car.id);
                _results.push(c.set(c.parse(car)));
              }
            }
            return _results;
          })();
          data.cars = this.cars.reset(cars);
        }
        return data;
      };

      return Env;

    })(Model);
    Run = (function(_super) {
      __extends(Run, _super);

      function Run() {
        return Run.__super__.constructor.apply(this, arguments);
      }

      Run.prototype.all = new (Collection.extend({
        model: Run
      }));

      buildProps(Run, ['car', 'created', 'rank', 'record_i', 'record_p', 'status', 'time', 'time_readable', 'times', 'track', 'user']);

      Run.prototype.urlRoot = '/v1/runs';

      Run.prototype.parse = function() {
        var data;
        data = Run.__super__.parse.apply(this, arguments);
        if (!data) {
          return data;
        }
        if (data.car) {
          data.car = Car.findOrCreate(data.car);
        }
        if (data.track) {
          data.track = Track.findOrCreate(data.track);
        }
        if (data.user) {
          data.user = User.findOrCreate(data.user);
        }
        return data;
      };

      Run.prototype.toJSON = function() {
        var data;
        data = Run.__super__.toJSON.apply(this, arguments);
        if (data.car != null) {
          data.car = data.car.id;
        }
        if (data.track != null) {
          data.track = data.track.id;
        }
        if (data.user != null) {
          data.user = data.user.id;
        }
        return data;
      };

      return Run;

    })(Model);
    Track = (function(_super) {
      __extends(Track, _super);

      function Track() {
        return Track.__super__.constructor.apply(this, arguments);
      }

      Track.prototype.all = new (Collection.extend({
        model: Track
      }));

      buildProps(Track, ['config', 'count_copy', 'count_drive', 'count_fav', 'created', 'demo', 'env', 'modified', 'name', 'next_track', 'parent', 'prevent_copy', 'published', 'user']);

      Track.prototype.bubbleAttribs = ['config', 'env'];

      Track.prototype.urlRoot = '/v1/tracks';

      Track.prototype.maxNameLength = 40;

      Track.prototype.validate = function() {
        var _ref, _ref1;
        if (((_ref = this.name) != null ? _ref.length : void 0) < 3) {
          return "name too short";
        }
        if (((_ref1 = this.name) != null ? _ref1.length : void 0) > this.maxNameLength) {
          return "name too long";
        }
      };

      Track.prototype.parse = function(response, options) {
        var config, data, env, nextTrack, nextTrackId, parent, parentId, user;
        if (this.config && !(this.config instanceof TrackConfig)) {
          console.error("Raw track.config detected in Track.parse()");
        }
        data = Track.__super__.parse.apply(this, arguments);
        if (!data) {
          return data;
        }
        if (data.config) {
          config = this.config;
          if (!(config instanceof TrackConfig)) {
            config = new TrackConfig;
          }
          data.config = config.set(config.parse(data.config));
        }
        if (data.env) {
          data.env = typeof data.env === 'string' ? Env.findOrCreate(data.env) : (env = Env.findOrCreate(data.env.id), env.set(env.parse(data.env)));
        }
        if (data.parent) {
          parent = data.parent;
          parentId = typeof parent === 'string' ? parent : parent.id;
          data.parent = Track.findOrCreate(parentId);
        }
        if (data.user) {
          user = data.user;
          if (typeof user === 'string') {
            data.user = User.findOrCreate(user);
          } else {
            data.user = User.findOrCreate(user.id);
            data.user.set(data.user.parse(user));
          }
        }
        if (data.next_track) {
          nextTrack = data.next_track;
          nextTrackId = typeof nextTrack === 'string' ? nextTrack : nextTrack.id;
          data.next_track = Track.findOrCreate(nextTrackId);
        }
        if (data.created && !data.modified) {
          data.modified = data.created;
        }
        return data;
      };

      Track.prototype.toJSON = function() {
        var data;
        data = Track.__super__.toJSON.apply(this, arguments);
        if (data.env != null) {
          data.env = data.env.id;
        }
        if (data.parent != null) {
          data.parent = data.parent.id;
        }
        if (data.user != null) {
          data.user = data.user.id;
        }
        if (data.next_track != null) {
          data.next_track = data.next_track.id;
        }
        return data;
      };

      return Track;

    })(Model);
    TrackRuns = (function(_super) {
      __extends(TrackRuns, _super);

      function TrackRuns() {
        return TrackRuns.__super__.constructor.apply(this, arguments);
      }

      TrackRuns.prototype.all = new (Collection.extend({
        model: TrackRuns
      }));

      buildProps(TrackRuns, ['runs']);

      TrackRuns.prototype.url = function() {
        return "/v1/tracks/" + this.id + "/runs";
      };

      TrackRuns.prototype.defaults = function() {
        return {
          runs: new RunCollection
        };
      };

      TrackRuns.prototype.parse = function() {
        var data, r, run, runs;
        data = TrackRuns.__super__.parse.apply(this, arguments);
        if (!data) {
          return data;
        }
        if (data.runs) {
          runs = (function() {
            var _i, _len, _ref, _results;
            _ref = data.runs;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              run = _ref[_i];
              if (typeof run === 'string') {
                _results.push(Run.findOrCreate(run));
              } else {
                r = Run.findOrCreate(run.id);
                _results.push(r.set(r.parse(run)));
              }
            }
            return _results;
          })();
          data.runs = this.runs.reset(runs);
        }
        return data;
      };

      return TrackRuns;

    })(Model);
    TrackSet = (function(_super) {
      __extends(TrackSet, _super);

      function TrackSet() {
        return TrackSet.__super__.constructor.apply(this, arguments);
      }

      TrackSet.prototype.all = new (Collection.extend({
        model: TrackSet
      }));

      buildProps(TrackSet, ['name', 'tracks']);

      TrackSet.prototype.urlRoot = '/v1/tracksets';

      TrackSet.prototype.defaults = function() {
        return {
          tracks: new TrackCollection
        };
      };

      TrackSet.prototype.parse = function() {
        var data, t, track, tracks;
        data = TrackSet.__super__.parse.apply(this, arguments);
        if (!data) {
          return data;
        }
        if (data.tracks) {
          tracks = (function() {
            var _i, _len, _ref, _results;
            _ref = data.tracks;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              track = _ref[_i];
              if (typeof track === 'string') {
                _results.push(Track.findOrCreate(track));
              } else {
                t = Track.findOrCreate(track.id);
                _results.push(t.set(t.parse(track)));
              }
            }
            return _results;
          })();
          data.tracks = this.tracks.reset(tracks);
        }
        return data;
      };

      TrackSet.prototype.toJSON = function(options) {
        var data, track;
        data = TrackSet.__super__.toJSON.apply(this, arguments);
        if (data.tracks != null) {
          data.tracks = (function() {
            var _i, _len, _ref, _results;
            _ref = data.tracks.models;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              track = _ref[_i];
              _results.push(track.id);
            }
            return _results;
          })();
        }
        return data;
      };

      return TrackSet;

    })(Model);
    User = (function(_super) {
      __extends(User, _super);

      function User() {
        return User.__super__.constructor.apply(this, arguments);
      }

      User.prototype.all = new (Collection.extend({
        model: User
      }));

      buildProps(User, ['created', 'credits', 'favorite_tracks', 'name', 'pay_history', 'picture', 'products', 'tracks']);

      User.prototype.bubbleAttribs = ['tracks'];

      User.prototype.urlRoot = '/v1/users';

      User.prototype.defaults = function() {
        return {
          tracks: new TrackCollectionSortName
        };
      };

      User.prototype.validate = function() {
        if (this.name.length < 3) {
          return "name too short";
        }
        if (this.name.length > 20) {
          return "name too long";
        }
      };

      User.prototype.parse = function(response, options) {
        var data, t, track, tracks;
        data = User.__super__.parse.apply(this, arguments);
        if (!data) {
          return data;
        }
        if (data.tracks) {
          tracks = (function() {
            var _i, _len, _ref, _results;
            _ref = data.tracks;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              track = _ref[_i];
              if (track == null) {
                continue;
              }
              if (typeof track === 'string') {
                _results.push(Track.findOrCreate(track));
              } else {
                t = Track.findOrCreate(track.id);
                _results.push(t.set(t.parse(track)));
              }
            }
            return _results;
          })();
          data.tracks = this.tracks.reset(tracks);
        }
        return data;
      };

      User.prototype.toJSON = function(options) {
        var authenticated, data, track;
        authenticated = options != null ? options.authenticated : void 0;
        data = User.__super__.toJSON.apply(this, arguments);
        delete data.bio;
        delete data.email;
        delete data.gravatar_hash;
        delete data.location;
        delete data.prefs;
        delete data.website;
        if (!data.admin) {
          delete data.admin;
        }
        delete data.pay_history;
        if (!authenticated) {
          delete data.admin;
        }
        if (data.tracks != null) {
          data.tracks = (function() {
            var _i, _len, _ref, _results;
            _ref = data.tracks.models;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              track = _ref[_i];
              _results.push(track.id);
            }
            return _results;
          })();
        }
        return data;
      };

      User.prototype.cars = function() {
        var carIds, products, _ref;
        products = (_ref = this.products) != null ? _ref : [];
        if (products == null) {
          return null;
        }
        carIds = ['ArbusuG'];
        if (__indexOf.call(products, 'packa') >= 0) {
          carIds.push('Icarus', 'Mayhem');
        } else {
          if (__indexOf.call(products, 'ignition') >= 0) {
            carIds.push('Icarus');
          }
          if (__indexOf.call(products, 'mayhem') >= 0) {
            carIds.push('Mayhem');
          }
        }
        return carIds;
      };

      User.prototype.isFavoriteTrack = function(track) {
        var _ref;
        return this.favorite_tracks && (_ref = track.id, __indexOf.call(this.favorite_tracks, _ref) >= 0);
      };

      User.prototype.setFavoriteTrack = function(track, favorite) {
        var isFavorite;
        if (this.favorite_tracks == null) {
          this.favorite_tracks = [];
        }
        isFavorite = this.isFavoriteTrack(track);
        if (favorite && !isFavorite) {
          this.favorite_tracks = this.favorite_tracks.concat(track.id);
          track.count_fav += 1;
        } else if (isFavorite && !favorite) {
          this.favorite_tracks = _.without(this.favorite_tracks, track.id);
          track.count_fav -= 1;
        }
        return this;
      };

      return User;

    })(Model);
    UserPassport = (function(_super) {
      __extends(UserPassport, _super);

      function UserPassport() {
        return UserPassport.__super__.constructor.apply(this, arguments);
      }

      buildProps(UserPassport, ['profile', 'user']);

      UserPassport.prototype.bubbleAttribs = ['user'];

      return UserPassport;

    })(Model);
    models = {
      buildProps: buildProps,
      BackboneCollection: Backbone.Collection,
      BackboneModel: Backbone.Model,
      Backbone: Backbone,
      Collection: Collection,
      Model: Model,
      Car: Car,
      Checkpoint: Checkpoint,
      Env: Env,
      Run: Run,
      RunCollection: RunCollection,
      StartPos: StartPos,
      Track: Track,
      TrackCollection: TrackCollection,
      TrackCollectionSortModified: TrackCollectionSortModified,
      TrackConfig: TrackConfig,
      TrackRuns: TrackRuns,
      TrackSet: TrackSet,
      User: User,
      UserPassport: UserPassport
    };
    for (k in models) {
      v = models[k];
      exports[k] = v;
    }
    return exports;
  });

}).call(this);
